package pt.tecnico.dsi.openstack.keystone.models

import io.circe.derivation.{deriveDecoder, deriveEncoder, renaming}
import io.circe.{Decoder, Encoder}
import pt.tecnico.dsi.openstack.common.models.{Identifiable, Link}
import pt.tecnico.dsi.openstack.keystone.KeystoneClient
import pt.tecnico.dsi.openstack.keystone.services.RoleAssignment

object Project {
  implicit val decoder: Decoder[Project] = deriveDecoder(renaming.snakeCase)

  object Create {
    implicit val encoder: Encoder[Create] = deriveEncoder(renaming.snakeCase)
  }
  /**
   * Options to create a Project
   *
   * @param name The name of the project, which must be unique within the owning domain. A project can have the same name as its domain.
   * @param description The description of the project.
   * @param domainId    The ID of the domain for the project.
   *                    For projects acting as a domain, the `domainId` must not be specified, it will be generated by the Identity service implementation.
   *                    For regular projects, if `domainId` is not specified, but `parentId` is specified, then the domain ID of the parent will be used.
   *                    If neither `domainId` or `parentId` is specified, the Identity service implementation will default to the domain to
   *                    which the client’s token is scoped. If both `domainId` and `parentId` are specified, and they do not indicate the same
   *                    domain, an Bad Request (400) will be returned.
   * @param isDomain Indicates whether the project also acts as a domain. If set to true, this project acts as both a project and domain.
   *                 As a domain, the project provides a name space in which you can create users, groups, and other projects.
   *                 If set to false, this project behaves as a regular project that contains only resources.
   *                 You cannot update this parameter after you create the project.
   * @param enabled  If set to true, project is enabled. If set to false, project is disabled.
   * @param parentId The ID of the parent of the project.
   *                 If specified on project creation, this places the project within a hierarchy and implicitly defines the owning domain,
   *                 which will be the same domain as the parent specified. If `parentId` is not specified and `isDomain` is false, then the project will use
   *                 its owning domain as its parent. If `isDomain` is true (i.e. the project is acting as a domain), then `parentId` must not specified (or
   *                 if it is, it must be null) since domains have no parents.
   *                 `parentId` is immutable, and can’t be updated after the project is created - hence a project cannot be moved within the hierarchy.
   * @param tags A list of simple strings assigned to a project. Tags can be used to classify projects into groups.
   */
  case class Create(
    name: String,
    description: Option[String] = None,
    domainId: Option[String] = None,
    isDomain: Boolean = false,
    enabled: Boolean = true,
    parentId: Option[String] = None,
    tags: List[String] = List.empty,
  ) {
    if (isDomain && domainId.isDefined) throw new IllegalArgumentException("For projects acting as a domain, the `domainId` must not be specified.")
    if (isDomain && parentId.isDefined) throw new IllegalArgumentException("For projects acting as a domain, the `parentId` must not be specified.")
  }

  object Update {
    implicit val encoder: Encoder[Update] = deriveEncoder(renaming.snakeCase)
  }
  /**
   * Options to update a Project
   *
   * @param name The name of the project, which must be unique within the owning domain. A project can have the same name as its domain.
   * @param description The description of the project.
   * @param enabled  If set to true, project is enabled. If set to false, project is disabled.
   * @param tags A list of simple strings assigned to a project. Tags can be used to classify projects into groups.
   */
  case class Update(
    name: Option[String] = None,
    description: Option[String] = None,
    enabled: Option[Boolean] = None,
    tags: Option[List[String]] = None,
  )
}

/**
 * @define context project
 */
final case class Project(
  id: String,
  name: String,
  description: Option[String] = None,
  domainId: String,
  isDomain: Boolean,
  enabled: Boolean,
  parentId: String,
  tags: List[String],
  links: List[Link] = List.empty,
) extends Identifiable with RoleAssigner {
  override def roleAssignment[F[_]](implicit client: KeystoneClient[F]): RoleAssignment[F] = client.roles.on(this)
}